{"version":3,"sources":["index.js"],"names":["scaleNames","c","f","toCelsius","fahrenheit","toFahrenheit","celsius","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","BoilingVerdict","props","TemperatureInput","scale","onTemperatureChange","value","onChange","e","target","Calculator","useState","setCelsius","setFahrenheit","handleTemperatureChange","ReactDOM","render","document","getElementById"],"mappings":"sLAGMA,EAAa,CACjBC,EAAG,UACHC,EAAG,cAGL,SAASC,EAAUC,GACjB,OAA4B,GAAnBA,EAAa,IAAW,EAGnC,SAASC,EAAaC,GACpB,OAAkB,EAAVA,EAAe,EAAI,GAG7B,SAASC,EAAWC,EAAaC,GAC/B,IAAMC,EAAQC,WAAWH,GACzB,GAAII,OAAOC,MAAMH,GACf,MAAO,GAET,IAAMI,EAASL,EAAQC,GAEvB,OADgBK,KAAKC,MAAe,IAATF,GAAiB,KAC7BG,WAGjB,SAASC,EAAeC,GACtB,OAAIA,EAAMb,SAAW,IACZ,sDAEF,0DAGT,SAASc,EAAT,GAAwE,IAA5CC,EAA2C,EAA3CA,MAAOb,EAAoC,EAApCA,YAAac,EAAuB,EAAvBA,oBAK9C,OACE,qCACE,2DAA8BtB,EAAWqB,GAAzC,OACA,uBAAOE,MAAOf,EAAagB,SAP/B,SAAsBC,GACpBH,EAAoBD,EAAOI,EAAEC,OAAOH,aAWxC,SAASI,IACP,MAA8BC,mBAAS,GAAvC,mBAAOtB,EAAP,KAAgBuB,EAAhB,KACA,EAAoCD,mBAAS,GAA7C,mBAAOxB,EAAP,KAAmB0B,EAAnB,KAEA,SAASC,EAAwBV,EAAOE,GACtC,IAAMnB,EAAuB,MAAViB,EAAgBd,EAAWgB,EAAOlB,GAAgBkB,EACrEO,EAAc1B,GACd,IAAME,EAAoB,MAAVe,EAAgBd,EAAWgB,EAAOpB,GAAaoB,EAC/DM,EAAWvB,GAGb,OACE,gCACE,cAACc,EAAD,CACEC,MAAM,IACNb,YAAaF,EACbgB,oBAAqBS,IAEvB,cAACX,EAAD,CACEC,MAAM,IACNb,YAAaJ,EACbkB,oBAAqBS,IAEvB,cAACb,EAAD,CAAgBZ,QAASK,WAAWL,QAK1C0B,IAASC,OAAO,cAACN,EAAD,IAAgBO,SAASC,eAAe,W","file":"static/js/main.3bf7178a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst scaleNames = {\n  c: \"Celsius\",\n  f: \"Fahrenheit\",\n};\n\nfunction toCelsius(fahrenheit) {\n  return ((fahrenheit - 32) * 5) / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return (celsius * 9) / 5 + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return \"\";\n  }\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\nfunction BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return <p>The water would boil.</p>;\n  }\n  return <p>The water would not boil.</p>;\n}\n\nfunction TemperatureInput({ scale, temperature, onTemperatureChange }) {\n  function handleChange(e) {\n    onTemperatureChange(scale, e.target.value);\n  }\n\n  return (\n    <fieldset>\n      <legend>Enter temperature in {scaleNames[scale]}:</legend>\n      <input value={temperature} onChange={handleChange} />\n    </fieldset>\n  );\n}\n\nfunction Calculator() {\n  const [celsius, setCelsius] = useState(0);\n  const [fahrenheit, setFahrenheit] = useState(0);\n\n  function handleTemperatureChange(scale, value) {\n    const fahrenheit = scale === \"c\" ? tryConvert(value, toFahrenheit) : value;\n    setFahrenheit(fahrenheit);\n    const celsius = scale === \"f\" ? tryConvert(value, toCelsius) : value;\n    setCelsius(celsius);\n  }\n\n  return (\n    <div>\n      <TemperatureInput\n        scale=\"c\"\n        temperature={celsius}\n        onTemperatureChange={handleTemperatureChange}\n      />\n      <TemperatureInput\n        scale=\"f\"\n        temperature={fahrenheit}\n        onTemperatureChange={handleTemperatureChange}\n      />\n      <BoilingVerdict celsius={parseFloat(celsius)} />\n    </div>\n  );\n}\n\nReactDOM.render(<Calculator />, document.getElementById(\"root\"));\n"],"sourceRoot":""}